> внутренняя структура
~~~~~~~~~~~~~~~~~~~~~~
! Draw in SmartDraw as diagram view

     +-|---|---|-+   DLL Loader --- see DLM package for DJGPP!
   ==| BOOTSTRAP |== Startup/Shutdown code/C Library/GUI Library
     +-|---|---|-+   Preload DLLs
                                                     +---------------+
                                         +---------->| Storage media |
                                         │           +---------------+
                                         v
   +----------------------+        +-----------+       +--------------+
   │ Import MOD,S3M,XM,IT │<-------│           │       │              │
   +|---------------------+        │    VFS    │<------│ Save neomods │<--+
    +------------------------------│           │       │              │   │
    │  +--------------+            +-----------+       +--------------+   │
    +->│              │                                                   │
       │ Load neomods │            +----------+                           │
       │              │----------->│          │---------------------------+
       +--------------+            │ Internal │
                                   │          │        +---------+
       +--------------+            │  neomod  │<------>│ Editors │
    +--│ Song         │<-----------│          │        +---------+
    │  +--------------+            +----------+
    │
    │  +--------+
    +->│ Device │
       +--------+

   Компоненты и их функции:

   BOOTSTRAP - Начальный загрузчик  - инициализация
   VFS       - Virtual Filesystem   - предоставляет унифицированный доступ
                                      к файлам в различных файловых системах
                                      и через Internet.
                                      Реализуется через class File.
   Import    - Module Import        - импорт модулей старых форматов
   Load      - Module/Song Loader   - загрузка песни/модуля в формате NMOD
   Save      - Module/Song Writer   - сохранение песни/модуля в формате NMOD
   Editors   - TrackEd, etc         - редактирование песни/сэмплов и т.д.
   Song      - Sequence of notes    - песня, хранение и воспроизведение
   Device    - Устройство вывода    - воспроизводит буфер через цифровой
                                      канал устройства вывода.

   +  Sample FX - эффекты для обработки сэмплов в Sample Editor.
   +  Sample Compression - сжатие сэмплов и их распаковка.


> MASTER TRACK
~~~~~~~~~~~~~~
There's no global track... But there is MASTER TRACK now...
 It doesn't contain any notes and samplestream commands,
 only track and effects control commands which
 are used to do master processing on a final samplestream.

Mixbuffer is represented as a sample, which is played back on Master Track,
which carries out effect processing on it...


> TEMPO
~~~~~~~
Player is tick-based, so that there is no need for tempo at the lowest
level of engine. Any view of tempo can be represented at GUI levels (UIL).
Tick frequency is constant: 250 ticks/second (Hz), 4 milliseconds resolution,
ticks/minute = 250*60 = 15000.


> PLAYBACK SCHEME
~~~~~~~~~~~~~~~~~
/*

SONG PLAYBACK (UIL -> MOL)
+  GUI:  Song.play_to_buffer(sndbuf, buf_size)
+  SONG:    Calculate buf_size
+  SONG:    For each track say, track[x].play_tick_into_buffer(mixbuf, voicebuf, buf_size)
-  TRACK:      Track[x] plays commands for new tick, setting voices parameters
-  TRACK:      Track[x] for each active voice say, voice[y].play_tick_to_voicebuf(voicebuf)
-  VOICE:         Say, associated_instrument.map_sample(voiceparams)
-  INSTRUMENT:       Instrument does sample mapping
-  SAMPLE:           Sample plays itself to buffer
-  VOICE:         [ LOW LEVEL MIXING OCCURS HERE ] (in Voice)
-  VOICE:         Voice[y] applies effects to voicebuf
-  TRACK:      Add processed voicebuf to mixbuf
+  SONG:    Say, master_track.play_tick_into_buffer(mixbuf, voicebuf, buf_size)
-  TRACK:      master_track plays commands for new tick
-  TRACK:      [ MASTER TRACK HAS ONLY ONE VOICE PLAYING AND ITS mixbuf SO ]
-  TRACK:      master_track post-processes mixbuf (presented as Sample)
-  TRACK:      [ FOR INSTRUMENT MAPPING WE CAN USE DUMMY INSTRUMENT mixInstr ]
+  SONG:    Downmix mixbuf to sndbuf
+  SONG:    Advance sndbuf position

SONG PLAYBACK (UIL -> SDL)
-  GUI:  Device.play_buffer(sndbuf)

*/

Volume is 0..4096. Internally it is <<4 for finer values range and finer slides.
(so, it is 12.4 fixed point)

Player attaches some effects for display/analysis purpose.
e.g. per-voice volume bars:
{
   for(i = 0; i < voicebuflen; i++) temp += voicebuf[i];
   temp >>= voicebuflenbits;
}


> SOURCE TREE
~~~~~~~~~~~~~
/devices <- SDL
/engine  <- MOL
/filer   <- OSRL
/gui     <- UIL


> FIDO RU.STRACK WISHLIST
~~~~~~~~~~~~~~~~~~~~~~~~~

Noise analysing:
<b> Hа какие параметры обращать внимание в первую очередь?
<Q> Hа высокие частоты. И если они есть уровень шума в них.



<Quadro>:
     Очень хотелось бы баззовскую концепцию наложения эффектов. Только чтобы
      они навешивались не на машины как в баззе, а на дорожки. Hапример на
      экране эффектов гденибудь внизу находятся все дорожки и они подцепляются
      к каким нибудь эффектам, а те в свою очередь кидаются на мастер.

      Hу и касаемо эффектов, кроме тех, что есть в фастрекерном sample editor'е
      неплохо бы еще Фильтры, EQ, Reverb, Flanger, Compressor, Normalize.


 3.  Cutoff: частотный фильтр, приблизительный перевод "стереть над". Эффект
    осуществляет стирание всех гармоник и составляющих звука выше или ниже
    заданной частоты. Алгоритмов его наложения, насколько мне известно, суще-
    ствует много, но я знаю только один самый быстрый и удобный для про-
    граммной реализации, его и опишу...
    Начнем с High cutoff.

    Возьмем конкретный пример:

    |    o o              |    o o                   o o
    |  oo o oo            |  oo o oo               oo o oo
    | o       o           | o       o             o       o
    |o         o          |o         o           o         o           o
    |o         o          |o         o           o         o           o
    o           o         o           o         o           o         o
    o           o         o           o         o           o         o
    |            o       o|            o       o             o       o
    |             oo o oo |             oo o oo               oo o oo
    |               o o   |               o o                   o o
    |                     |
    |                     |
    |----------1----------|
    |                     |
    01234567890123456789012

     Выделенная зона это один полный период колебания звука. И в данном случае
    он равен 22. Частота данного звука при частоте дискретизации 44khz будет
    44100/22 = 2004 Hz . Для того чтобы в этом сэмпле стереть все высокочасто-
    тные составляющие выше частоты 2004 Hz нам нужно брать из сэмпла по 21
    (21 байт для 8 бит и 42 байта для 16 бит :) позиции считать из них среднее
    арифметическое, ложить в сэмпл результата это среднее арифметическое,
    смещаться на одну позицию в исходном сэмпле и в сэмпле результата, и
    делать опять тоже самое. Формула получается такая:

    R(n) = (S(n) + S(n+1) + S(n+2) + .... + S(n+(C-1)) ) / C

    Где R - сэмпл результата.
        S - исходный сэмпл.
        C - полный период частоты которая стирается вместе со всеми
            частотами выше нее.
        n - позиция в массиве (сэмпле).

     Само стирание высоких частот в данном случае происходит за счет того,
    что все гармоники имеющие полный период короче заданного самоуничтожаются.
    посмотри еще раз на рисунок если на тот исходный сэмпл наложить Cutoff
    данным методом и при вычислении взять C = 22, то сэмпл полностью уничто-
    жится. Если взять C = 21, то останется одна ведущая (самая громкая) гармо-
    ника с частотой 2004 Hz, но она станет существенно тише чем была, если
    взять C = 20 то ведущая частота станет чуть громче и могут сохранится
    шумовые составляющие (если предположить что они тоже есть в данном звуке)
    в пределах 2205 Hz. И т.д. Короче график получается примерно такой:

      ^
    А |OOOOOOOOOOOOOOOOOO
    м |OOOOOOOOOOOOOOOOOO
    п |OOOOOOOOOOOOOOOOOOO
    л |OOOOOOOOOOOOOOOOOOO
    и |OOOOOOOOOOOOOOOOOOOO
    т |OOOOOOOOOOOOOOOOOOOOO
    у |OOOOOOOOOOOOOOOOOOOOOOO
    д |OOOOOOOOOOOOOOOOOOOOOOOOOOO
    а +----------------------|----------------------------------->
      0  Частота             2004Hz                          5000HZ


     График немножко неровный, но более быстрого метода насколько мне
    известно не существует.
     Это был High cutoff. Low cutoff делается почти по тому же принципу.
    Формула:

    R(n) = S(n) - ( (S(n) + S(n+1) + S(n+2) + .... + S(n+(C-1)) ) / C )

    Все переменные те же.

     Напоследок один маленький совет по поводу програмированния этого эффекта.
     Вовсе не обязательно для расчета каждого следующего числа в сэмпле
    результате каждый раз выгребать из сэмпла исходника по 2-44100 чисел
    чтобы считать их среднее арифметическое. Это можно сделать единыжды,
    а потом после каждого увеличения n на единицу вычитать из общей суммы
    чисел взятого участка S(n-1) и прибавлять к ней S(C-1). Это важно, т.к.
    без этого данный метод из самого быстрого превращается в самый медле-
    нный. ;) Вот пожалуй и все.

- RU.STRACK (2:5000/96.16) ----------------------------------------- RU.STRACK -
 Msg  : 1346 of 1483
 From : Aleksey V. Vaneev           2:5003/15.1             Fri 09 Jul 99 12:06
 To   : All                                                 Fri 09 Jul 99 23:26
 Subj : low-pass filter
--------------------------------------------------------------------------------
.TID: FastEcho 1.46.1 309192
Вот еще фильтр, кому надо. Это IIR-фильтр (рекурсивный фильтр).

=== Cut ===
RC = sqrt (3) / (2 * Pi * fc)
T = 1 / freq

y (n) = (T * x (n) + RC * y (n-1)) / (T + RC)
=== Cut ===

(фактически, всего два умножения).  <berk - три, вообще-то>

fc - частота среза (меньше freq/2)
freq - частота дискретного сигнала

Все описания здесь: http://www.intersrv.com/~dcross/audio.html
Hесмотря на то, что там говорится о необходимости использования комплексных
чисел, фильтр работает и с обычными.

 4.  EQ: Наверное ты уже и сам догадался как его можно сделать при помощи
    нескольких Cutoff'ов. :) Просто делается несколько частотных полос у
    каждой из которых свои ограничители High cutoff и Low Cutoff. И его
    можно даже немножко оптимизировать. Т.к. все полосы граничат друг с другом
    можно делать на каждой границе между двумя соседними полосами не два
    cutoff'а, а один. В общем формулу выводить не буду, думаю что и так все
    понятно. :)
     Предлагаю тебе сделать его стерео и 8'ми полосным, и сделать возможность
    настройки границ каждой полосы. И обязательно сделай чтобы все настройки
    эквалайзера сохранялись вместе с музыкой!
     Теперь немножко о том как сделать так чтобы EQ накладывался на каждую
    дорожку трэкера... Попробую изобразить это в виде блоксхемы прохождения
    звука по фильтрам. Возьмем упрощенный вариант в котором есть только
    два канала и двухполосный моно эквалайзер. (Звук идет снизу вверх)

                      /-------------------------\
                      | Выход на звуковую карту |
                      \-------------------------/
                        /                     \
                     1/                         \2
                    /                             \
         /-----------------\               /-------------------\
         |  Полоса частот  |               |   Полоса частот   |
         | от 0 до 10000hz |\             /| от 10khz до 22khz |
         \-----------------/   \       /   \-------------------/
            |                     \ /                 |
            |                    /   \                |
           3|                4/         \5            |6
            |              /               \          |
            |           /                     \       |
         /--------------\                     /--------------\
         |   Канал N1   |                     |   Канал N2   |
         \--------------/                     \--------------/


     Полоски помеченные цифрами от 1 до 6 показывают как должны перетекать
    потоки данных. Т.е сначала из дорожек в фильтры. Потом из фильтров в
    звуковую карту. Изменяя громкость потоков данных можно делать следующее:

     1 и 2 потоки. Настройка глобального EQ на оба канала.
     3 и 4 потоки. Настройка EQ для канала N1
     5 и 6 потоки. Настройка EQ для канала N2

     Теперь в уме усложни эту конструкцию до восми фильтров и 32 дорожек и
    ты получишь то, что требуется. :)

    Касабельно реализации хотелось бы его видеть в трэкере примерно так:

    |--------------------------------------------------------|
    |1l|2l|3l|4l|5l|6l|7l|  | |Vol.| |1r|2r|3r|4r|5r|6r|7r|8r|
    |==|  |  |==|==|  |==|  | |====| |==|  |  |==|==|  |==|  |
    |  |==|==|  |  |==|  |==| |    | |  |==|==|  |  |==|  |==|
    |  |  |  |  |  |  |  |  | |    | |  |  |  |  |  |  |  |  |
    |--------------------------------------------------------|
    |    Panning.               ||                           |
    |--------------------------------------------------------|
    | C-5 00 00 00 000 0000 0000                             |
    |      |  |  |  |    |    |                              |
    |      |  |  |  |    |     \___ Эффект N2                |
    |      |  |  |  |     \________ Эффект N1                |
    |      |  |  |   \_____________ Аккорд.                  |
    |      |  |   \________________ Пэннинг.                 |
    |      |   \___________________ Громкость.               |
    |       \______________________ Номер инструмента.       |

     Циферки 1l - 8l показывают вертикальные движки для левого EQ.
     Циферки 1r - 8r показывают вертикальные движки для правого EQ.
     Vol. это движок для просмотра и управления колонкой громкости.
     Panning это движок для просмотра и управления пэнингом в трэке.

     Т.е. если ты еще не догадался это все индивидуальное над каждой
    дорожкой.

     Видимо было бы не очень удобно делать свое положение ручек EQ для каждой
    позиции в трэкере по этому мне кажется, что проще было бы сделать свои
    положения ручек EQ для каждой дорожки в каждом паттерне. И над всеми
    дорожками еще один общий эквалайзер с возможностью прописывать границы
    пропускаемых частот для всех движков. Который естественно накладывается
    на всю композицию сразу и не меняется для конкретных паттернов и позиций.
     А касаемо громкости и пэннинга, хотелось бы чтобы при включенном прои-
    грывании и редактировании можно было крутить показанные выше два движка,
    и чтобы циферки сами записывались в паттерн соответственно их положению.
    И еще в Fast Tracker'е начиная с 2.06 версии сделали очень удобную фичу.
    Управление громкостью в помеченном блоке или дорожке где находится курсор
    или редактируемом паттерне. Соответственно Alt+V, Shift+V либо Ctrl+V.
    Короче просто вываливается окошечко в котором можно проставить громкость
    в помеченном блоке скажем от 0.3 в начале до 1.0 в конце или любые другие
    значения. Причем если в колонке громкости уже стояли какие то значения
    они учитываются и умножаются на какойто промежуточный (между скажем 0.3
    и 1.0) коофицент. Было бы здорово если бы в Trick Track тоже была такая
    функция. И не только для колонки громкости, но и для колонки пэннинга.

 5.  Reverb: Реверберация это как бы послезвучание сэмпла. Сам эффект
    в природе происходит благодаря многочисленному отражению извлеченного
    звука от окружающих предметов. Которое, особенно при нахождении, в
    месности со сложным рельефом (аккустикой) бывает абсолютно хаотическим.
    Т.е. тебе прийдется делать кучищу постепенно затухающих повторений
    исходного сигнала со случайным пэнингом, случайной, но всеже постепенно
    уменьшающейся громкостью, и случайным положением ручек эквалайзера
    (скажем от 30% до 100% каждая) так как различные предметы имеют кроме
    всего прочего еще и разную звукопроводящую/отражающую картину разных
    частот. На первый взгляд может показатся что производить все эти расчеты
    в реальном времени просто невозможно, однако мне кажется что это не так.
    Правда вот придумать быстрый алгоритм взаимодействующий с приведенным
    выше эквалайзером мне пока не удалось. Отдельные части этой головоломки
    у меня в голове крутятся, но собрать их воедино пока не получается.
    В общем я буду думать над этим еще. В следующий раз пришлю описание
    хоруса с флэнжером и ревера если смогу таки придумать быстрый и при-
    стойный алгоритм. А можешь и сам попробовать. Если будут какие идеи
    напиши мне. В общем это я так полагаю уже все эффекты для колонки
    эффектов и это пока не основное.

 6.  Ну и на последок хочу напомнить тебе о том что обязательно надо сделать
    возможность полностью перевыбирать управляющие клавиши редактора. Мне
    кажется что это единственная вещь благодаря которой на твой редактор
    смогут пересесть и импульсовцы и фастрэкерщики и все остальные. :)

P.S. Совсем забыл. Было бы еще очень удобно если бы ты сделал фунцию сэмплиро-
    вания паттерна (или нескольких) в сэмпл. Можно было бы делать лупы не
    выходя из трэкера.

<berk note>
Output: [Sample entry    ][v]  Entry#: [ 16]
</note>


-----------------------

Также было бы круто сделать комманду Program. Т.е. пишешь например командо-
чку "POUTN" где "P" это комманда программы, а "OUTN" это собственно имя програ-
ммы. А в программе можно указать любое количество эффектов с конкретными огиба-
ющими и конкретными значениями для каждого из эффектов. Если использовать то-
лько цифровые и латинские буквы, программ может быть 36*36*36*36=1679616. Как
мне кажется этого вполне достаточно. Хватит на восемьсотдвадцать 32х канальных
паттернов где в каждой строчке каждого канала будет стоять отдельная уникальная
комманда программы. 8) Врядли найдется маньяк которому этого будет мало. 8)
Здесь же и добавлю про EQ и реализацию команды. Cтоит сделать редактор программ
и в нем отдельным пунктом сделать возможность изменения параметров эквалайзера,
причем двумя способами. В первом варианте движки EQ моментально изменяют поло-
жения с тех что были на те что указанны. И во втором варианте движки EQ плавно
изменяют свои значения от исходных к требуемым за время за которое проиграет
определенное количиство строк в паттерне. Так же в этом редакторе необходимо
сделать возможность указывать какие эффекты включенны/выключенны в канале
(т.е. если указать в программе что какойто эффект выключен то после запуска
программы его наложение отключается) и в каком порядке эффекты накладываются на
канал.

И еще один момент. Эффект включенный в одном канале не обязательно должен
влиять только на тот канал в котором он был включен. Я долго думал по этому
поводу и придумал три способа как это можно сделать.
a) Реализовать эту фишку в комманде "Программа" и там сделать возможность для
каждого из эффекта указывать в каких каналах он должен включится.
б) Сделать комманду например "X" которая будет указывать от какого и до какого
канала будет работать данная дорожка эффектов. Т.е пишешь например X1220 и
после этого все эффекты включенные в данной дорожке должны будут автоматически
срабатывать в каналах с 12'го по 20'ый.
в) Вообще не прикреплять дорожки эффектов к какому либо конкретному каналу,
а сделать возможность "втыкать" эти дорожки в произвольное место между каналами
и где нибудь сверху указывать с какого по какой каналы находятся под их вли-
янием. Причем это значение естественно можно изменять той же командой "X".

------------------------


<VS> ...Envelope Modulation, Resonance, CutOff Frequency, Decay...

<Alex Klimov>:
-------------------------------------------------------------------------------
 От   : Alex Klimov                         2:5025/150.19   Втр 23 Мар 99 17:51
-------------------------------------------------------------------------------
<AK> Автоплэй пpи выбоpе сэмпла с диска и в pедактоpе,
<SK> С диска понятно, только это будет не автоплей, а автолоад (т.е. сэмпл
      в библе можно будет играть как будто он уже загружен, всеми нотами)
<AK> Хорошо, а послушать звучание этого сэмпла (на винте) применительно к
      нему огибающих и фильтра мона будет ?

<SK> Undo/Redo buffer is unlimited (limited by free memory only)

     Для эффектов задумано несколько вариантов:
      │ во-первых, написание в строке статуса (трекером) имени введенного
        эффекта (как в DTrack).
      │ Затем, Fast Effect Selector, когда mouse right click or Ctrl-E вызывают
        хот-менюшку с Категориями типа Volume, Pitch, Panning, каждое с
        подменю типа Slide Left, Slide Right, Fade etc, с возможностью это
        законфигурить под себя или даже конкретно под текущенаписываемую
        композицию.

<SK>  │ Hу и Effect Selector с подробным диалогом выбора эффекта,
<AK> А это новость ;) !! Hеплохо.

<SK> подбора параметров, набора пресетов, возможности превью с заданным
      сэмплом. Еще будут default effect/param (как по Space в IT), effect
      param interpolation between two rows etc.
<AK> Если уж разговор о пресетах зашел, то не лучше ли сделать
      наборы для разных стилей:
      ритмы, установки под огибающие и фильтры, библиотеки сэмплов, а лучше
      вставить в SampEditor сэмплер !!!! И обработчик звука (типа микшера),
      для возможности "выведения" принципиально нового звука, обработки, или
      просто генерации (потипу Stomper или WavGenerator), и чтоб твое "творение"
      можно было включить в "пресет" по данному стилю.

     Turd - на слэнговом датском (кажется) означает "круто";)

     Я вот еще подумал - как насчет дополнения в Filter:
      Chorus, Variation...., как в миди, для них можно и свои
      огибающие сделать (либо ручки крутить)

-------------------------------------------------------------------------------
 От   : SoulBurner                          2:5030/739.9    Срд 24 Мар 99 13:12
-------------------------------------------------------------------------------
<SK> С диска понятно, только это будет не автоплей, а автолоад (т.е. сэмпл в
      библе можно будет играть как будто он уже загружен, всеми нотами)
<SB> Hеплохо было бы, чтобы сэмплы можно было в архивах держать и из них грузить.
      Имхо, даже удобнее, чем либа...

<SK> Ага, присобачу, "фортепианную клаву" как в FT InsEd
<SB> Только, чтобы ее убирать можно было, ладно? А то мне она, например, нафиг
      не нужна. Мне лучше это место чем-нить другим занять...

-------------------------------------------------------------------------------
 От   : CyberWorm                           2:5030/662.38   Втр 16 Мар 99 11:20
-------------------------------------------------------------------------------
    Свяжись с Квасовым (2:5030/671.100), он тоже что-то подобное пишет,
обменяетесь идеями-опытом.

    Кстати - с yдовольствием бы занался beta-тестиpованием.

-------------------------------------------------------------------------------
 От   : Oleg Sharonov                       2:5020/740.17   Пон 05 Апр 99 15:10
-------------------------------------------------------------------------------
 SK>> Крюто! Демомейкерам это ух как понравится :) Тут уже нужен Agent
 SK>> Orange как автор Orangator, его желание поделится информацией,
 SK>> плюс ссылки на литературу по обработке звука.

Hy спpашивай...

-------------------------------------------------------------------------------
 От   : Michael DarkForce                   2:5000/114.4    Суб 03 Апр 99 18:33
-------------------------------------------------------------------------------
А вообще если тебе нужно знать, как работает фастовый могу рассказать.
Для forward loop:

          Hачало лупа         Конец лупа
               v                   v
               |                   |
\/\/\/\/\/\/\/\|\/\/\/\/\/\/\/\/\/\|\/\/\/\/\/\/\/\/\/\
               |                   |
          ^^^^^^^^^^^         ^^^^^^^^^^^
      Участок сэмпла N1     Участок сэмпла N2

 Hа рисунке "Участок сэмпла N X" это то место где сэмпл помечен (правой кнопкой
мыши). Эти два участка скрещиваются друг с другом и в результате получается что
центры конца лупа и начала лупа абсолютно одинаковы. Т.е в центрах уровень
громкости двух скрещиваемых мест в сэмпле 50/50%, а по краям помеченного
участка, если например говорить про начало лупа (участок сэмпла N1), громкость
исходного сэмпла постепенно увеличивается до максимума, а громкость
накладываемого участка N2 постепенно падает до нуля.

 Для ping pong loop система похожая, но там наложение происходит не между двумя
зонами сэмпла, а между правой и левой стороной сэмпла, в помеченном участке
вокруг начала или конца лупа.

-------------------------------------------------------------------------------
 От   : Alexander Matchugovsky              2:5020/996.21   Вск 16 Май 99 00:55
 К    : Oleg Sharonov                                       Срд 02 Июн 99 20:26
-------------------------------------------------------------------------------
 OS> Bсе-таки поpтаменто на pеальном синте намного пpавдивее звyчит, чем
 OS> что-либо, что я слышал в тpекеpе.
 Это бесспоpно. И вибpатто зачастую тоже. А жаль.


 - The main program window consists of the following elements:
  +---screen border--------------------------+
  |=[smalltoolbar]=[ statusbar              ]|
  |SUX.NMOD  ^|=[optional]=[toolbar]=========|
  |+ Songs   .|                              |
  |+ Tracks  #|                              |
  |... |     .|                              |
  |  tree    .|                              |
  |    |     .|      [work space]            |
  |    |     .|                              |
  |    |     .|                              |
  |    |     v|                              |
  +------------------------------------------+
smalltoolbar: constant operations such as open/save/saveas/new, not much
status bar: effects names, currently active processes etc..
optional toolbar: sub-window dependent tools

dropdown selectors do dropdown immediately when mouse
   cursor is over it (with very small delay)
most recently used tabs/items are leftmost/topmost

 - Listed in tree:
   # File <filename> -> opens "File properties" sub-window
   + Songs
     # <songname> -> opens "Song properties" sub-window
     + Tracks
       # <trackname - instrument> -> opens track sub-window (+Sequencer)
     + Instruments
       # <instrument> -> opens instrument sub-window
     + Samples
       # <sample> -> opens sample sub-window
     + Envelopes
       # <envelope> -> opens envelope sub-window
     + Effects
       # <effectname> -> opens effect sub-window





EFFECTS PROPOSAL BY (WHO SUBMITTED THEM???)

Some basic digital effects for
digital signals. Maybe more will
be added later.

Datatype of 'gain' should either
byte or word depending on wanted
gain accuracy. Byte might enough
on some cases, but not neccaserily
for all.


Delay effects: Echo/Reverb/Chorus/Flange
========================================

Echo/Reverb:
                                                                                                      +---+
[Input]--*bInputGain-+-+------------------------------------------------*bDryOut--------------------->|   |
                     ^ |                                                           +---+              |   |
                     | +-| taps[0].wDelay |-+---------------------*taps[0].bGain-->|   |              | + |-+->[Output]
                     |                      |                                      | + |--*bWetOut--->|   | |
                     |                      +-| taps[1].wDelay |--*taps[1].bGain-->|   |              |   | |
                     |                                                             +---+              +---+ |
                     |                                                                                      |
                     +-----------------------------------------*bFeedback-----------------------------------+

Chorus:

Same as Echo but modulation is added to each tap.


Flanger:

Same as Reverb but modulation is added to signal fed back.


struct echo
{
   gain bInputGain; // Input signal amplification
   gain bDryOut;    // Amount of input signal passed thru
   gain bWetOut;    // Amount of processed signal passed to output
   gain bFeedback;  // Reverb signal feedback

   word wLowCutoff;  // ? FIXME: these can be in cutoff filter
   word wHighCutoff; // ?

   byte bNumTaps;
   struct
   {
      byte bModulationRate;    // Chorus/Flanger
      byte bModulationDepth;   // Chorus/Flanger
      gain bGain;              // Echo/Reverb
      word wDelay;             // Echo/Reverb
   } taps[];
};


Volume effects: Distortion/Gating/Compressor
============================================

struct distortion
{
   gain bInputGain;
   gain bDryOut;
   gain bWetOut;
   gain bThresholdLevel; // Gating
   gain bClampLevel;     // Gating
   word wAttackTime;     // Gating
   word wReleaseTime;    // Gating
   word wHoldTime; // uhm?
};


Equalizer
=========

struct equalizer
{
   gain bInputGain;
   gain bDryOut;
   gain bWetOut;
   byte bAccuracy;
   byte bChannels;
   byte bBands;
   gain bGain[bChannels][bBands];
};


======== QUADRO's TRICKTRACK NOTES ========

 Cистема команд и эффектов формата TrickTrack.

 Заранее скажу, что, т.к. я работал в основном с Fast Tracker 2, система осно-
вных команд будет немножко похожа на систему команд FT2. Просьба сильно к этому
не придираться, так как это все равно можно изменить или даже сделать изменя-
емым. :)

 В первую очередь, наверное, стоит сказать о ее главном принципе. Все эффекты
должны работать одновременно, и одна команда на включение или управление эффе-
ктом, приходящая в плейер из дорожки, ни в коем случае не должна выключать все
остальные команды в этой дорожке. Для этого для каждого из виртуальных каналов
необходимо ввести несколько 72-битных переменных, в которых будет храниться
состояние параметров каждого эффекта в канале. Назначение битов можно сделать
такое:

 0 - Состояние первого параметра эффекта - 0 стабилен, 1 работает по огибающей.
 1 - Fade in или Slide\Fade out первого параметра - 0 Fade in, 1 Fade Out.
 2 - Состояние второго параметра эффекта - 0 стабилен, 1 работает по огибающей.
 3 - Fade in или Slide\Fade out второго параметра - 0 Fade in, 1 Fade Out.

 ---||--- и т.д.

 Естественно, одной переменной здесь не обойтись, поэтому необходимо завести еще
некоторое количество переменных. Общая схема будет такая:

 1 - Эффект включен/выключен.
 2 - Количество параметров эффекта (не более 36).
 3 - Приведенная выше переменная с флажками, указывающими состояние каждого
     параметра эффекта.

 Также надо завести несколько переменных для каждого отдельно взятого
параметра каждого из эффектов.

 1 - Если параметр стабилен, то его значение, если управляется огибающей, то
     номер огибающей.
 2 - Положение в огибающей. (рекомендую при назначении огибающей для
     параметра сделать эту переменную равной длине огибающей. И при
     проигрывании музыки каждый тик уменьшать ее на единицу. А по достижении
     переменной значения ноль, обнулять бит состояния параметра эффекта и
     приравнивать переменную N1 к последнему значению в огибающей. Т.е указать,
     что данный параметр эффекта стабилен, и установить его в последнее
     положение огибающей.)
 3 - Если Fade in или Slide/Fade Out включены, то переменная содержит количе-
     ство тиков до состояния, в которое должен плавно измениться параметр
     эффекта. Если выключены, то переменная содержит число FFFF, которое не
     уменьшается. (рекомендации те же, что и для переменной N2, с той лишь
     разницей, что вместо длины огибающей данный параметр содержит длину Fade
     in или Slide\Fade Out'а)

 Что такое огибающая и slide, я думаю, никому обьяснять не надо. А вот с
Fade out'ом и Fade in'ом в данном конкретном случае придется немножко
разобраться.
 Как все мы (надеюсь :) знаем, Fade out - это затухание. Раньше в Fast Tracker'е
эту фишку применили только к огибающей громкости. т.е при его включении
за определенное количество тиков происходило плавное сваливание громкости
инструмента до нуля. И при этом его огибающая громкости не отключалась, а
продолжала работать, как ей и положено. Таким способом при помощи зацикленной
огибающей громкости можно было например сделать эффект плавно затухающего эха.
 Мы пойдем дальше, во-первых почему обязательно до нуля? Значение той точки,
в которой остановится параметр громкости инструмента, должно быть задаваемым,
но амплитуда огибающей громкости при этом все равно должна постепенно
уменьшаться до нуля и через заданное количество тиков остановиться в той точке,
которая была задана в параметрах Fade Out'а, что бы там не было нарисовано в
огибающей. Во-вторых, почему обязательно применять этот эффект исключительно к
огибающей громкости? Может, я хочу таким же способом поиграться с паннингом.
Чтобы, например, инструмент, плавно качающийся в панораме по зацикленной огиба-
ющей, плавно остановился в определенной точке панорамы.
 Надо сделать fade out доступным для огибающей каждого параметра в каждом
эффекте. Тоже и с Fade in'ом.
 Теперь немного математики. Производится два действия. Первое-это плавное
уменьшение амплитуды огибающей. И второе-это сложение получающейся постепенно
уменьшающей амплитуду огибающей с прямой огибающей, идущей от нуля до той точки,
в которую стремится Fade Out.

 Формула: R(n)=O(n)*(1/x*(x-n))+z/x*n

Здесь:

  R - огибающая с наложенным на нее Fade out.
  O - та огибающая, над которой производится Fade out.
  x - длина Fade out в тиках.
  z - конечная точка, в которой уровень движка управляемого огибающей
      после завершения Fade out станет статичным.
  n - переменная, которая с течением работы Fade Out каждый тик увеличивается
      на единицу, при этом проходя все значения от 0 до длины Fade Out в тиках.

 Если во время включения fade out параметр эффекта содержит статичное значение,
то оно берется всесто переменной O(n).

 Обьяснять, что такое Fade in, я думаю, уже нет смысла. Это тоже самое с
точностью до наоборот. Если по формуле, то все n заменяются на (x-n), а (x-n)
на n. Формула: R(n)=O(n)*(1/x*n)+z/x*(x-n)


 С огибающими и их Fode out'ами вроде бы все понятно, теперь возникает
закономерный вопрос: при чем здесь Slide? А при том, что, когда огибающая у
параметра эффекта отключена, иногда тоже хочется плавно передвинуть его
значение в определенное положение. И сделать это не при помощи огибающей,
а командой.
 Таким образом, получается, что в данном случае slide и fade out -
это одна подкоманда с одними и теми же параметрами. Т.е когда включена
огибающая, эта подкоманда приводит одно положение параметра эффекта в
другое за заданное количество тиков при помощи Fade out'a. Если же огибающая
выключена, то она делает то же самое при помощи обычного Slide. В принципе
можно делать обе функции одной подпрограммой, которая и с со стабильным
параметром будет работать как с огибающей и с огибающей делать тоже самое.
Для того, чтобы например избежать ситуаций, когда огибающая уже закончилась, а
fade out еще идет, или тоже не совсем понятно, что делать плейеру, когда при
включенном slide вдруг приходит команда о включении огибающей данному
параметру. Можно, конечно, на ходу пересчитывать данные и переходить от одной
формулы к другой, но проще сделать все в одном флаконе.

  Далее о собственно эффектах, командах и подкомандах. Все команды сами по себе
ничего не делают. То есть у нас есть движок плеера, самостоятельно работающий
по переменным описанным выше, а все команды просто задают переменным этого
движка такие значения, при которых они автоматически выполнятся.

--------------------------------------------------------------------
 0xyyyy - аккорд.
--------------------------------------------------------------------

 Здесь 0 - имя команды, x - имя подкоманды, yyyy - параметры подкоманды.

 Подкоманды:

0 - Указать ноты для аккорда.

Пример:   |C-4 21 00047A|

 При задействовании данной команды в дорожке включаются 4 (или 8) виртуальных
канала. В каждом своя нота: С-4,E-4,G-4,A#4.

Здесь цифры и буквы - это расстояния в полутонах от нажатой клавиши до тех
других клавиш, которые будут нажаты. Сама же нажатая нота, если это не указанно
в команде, при этом не нажимается.

 Значения у букв и цифр будут такие:

 0 - 0            C - 12        O - -12
 1 - 1            D - 13        P - -11
 2 - 2            E - 14        Q - -10
 3 - 3            F - 15        R - -9
 4 - 4            G - 16        S - -8
 5 - 5            H - 17        T - -7
 6 - 6            I - 18        U - -6
 7 - 7            J - 19        V - -5
 8 - 8            K - 20        W - -4
 9 - 9            L - 21        X - -3
 A - 10           M - 22        Y - -2
 B - 11           N - нет ноты  Z - -1

 Не очень удобно для програмирования, но мы ведь думаем в первую очередь
о пользователе, не так ли?

 1 - Указать громкости для нот в аккорде. Только 4 их старших бита.
Для каждой ноты.

 2 - Указать паннинг для нот в аккорде. Тоже только старшие 4 бита от 16 битного
положения в панораме.

 3 - Указать смещение нот аккорда в тиках. Смещение ноты во времени произво-
дится относительно начала строки и с использованием всех тех же цифровых и
буквенных значений, которые были даны для смещения в полутонах в аккорде.
Исключение составляют лишь знаки O-Z. Я понимаю, что во время проигрывания
проверять сонг наперед на предмет присутствия команд, которые могут смещать
ноты назад, было бы слишком неудобно. Да и это просто не нужно.

 Подкоманды 1,2 и 3 срабатывают только в том случае, когда стоят в команде
"программа" сразу после подкоманды 0. Т.е после выполнения каждой команды 0
должна производится проверка, не стоит ли дальше в программе опять команла 0 с
прикрепленными дополнительными данными. Все младшие неуказанные биты значений
громкости и паннинга автоматически приравниваются к нулю.

-----------------------------------------------
 1xyyyy - Pitch
-----------------------------------------------

 Эффект с одним 16-битным параметром и подкомандами slide, fade in и
fade out. Где 1 - имя команды, x - имя подкоманды. yyyy - 16-ричное значение,
задаваемое подкомандой.

 Список подкоманд:

 0 - Указать стабильное значение для эффекта в последнем использованном
виртуальном канале(лах) дорожки. В пределах от -32767 до +32768 (0000-FFFF)
значений fine tune.

 1 - Указать огибающую для параметра эффекта в последнем использованном
виртуальном канале дорожки.

 2 - Fade out или Slide значения эффекта в последнем использованном
виртуальном канале дорожки.

 Пример: 22xxyy

 Здесь xx - это то значение параметра эффекта, к которому он должен прийти за
количество тиков yy.

 3 - Fade in огибающей эффекта в последнем использованном виртуальном
 канале дорожки.

 Пример: 23xxyy

 Здесь xx это то значение параметра эффекта, от которого будет начинаться
увеличение амплитуды огибающей, которое дойдет до максимума за количество
тиков yy.


-------------------------------------
 20xxzz - Slide & morphing
-------------------------------------

 Команда работает исключительно в том случае, когда вместе с ней в одной
строчке стоит нота и номер инструмента, в который необходимо морфировать
играющий. Здесь 20 - имя команды, xxzz - значения эффекта, который морфирует
последний использованный инструмент за количество тиков yy в инструмент zz.

 Морфинг происходит, во-первых, благодаря тому, что делается Fade out
огибающей громкости играющего инструмента (либо аккорда); во вторых, благодаря
тому, что делается Fade in огибающей громкости инструменту (либо аккорду), к
которому необходимо прийти. В третьих, в одной строке с командой должна стоять
нота. Т.е автоматически будет делаться еще и slide. И для затухающего инстру-
мента, и для появляющегося. И, в четвертых, если в этой же строке стоит
комманда аккорда, то и морфинг, и slide будут производиться над всем аккордом
целиком. Но это будет возможно только при тех же условиях, которые указанны для
комманды slide note. Т.е оба аккорда должны содержать равное количество нот.

------------------------------------
 21yyzz - Morphe current note
------------------------------------

 Этот эффект выполняется только в одной строке с нотой и номером инструмента
и плавно перегоняет ее же в другой инструмент zz за количество тиков yy,
делая это таким же способом, как в команде 20.

---------------------------------------------------------------
 22yyyy Sample Offset
---------------------------------------------------------------

 Здесь 22 - имя команды, yyyy - значение эффекта.

 Эффект задействуется исключительно в тех случаях, когда находится в одной
строчке с нотой, и в этой же строчке отсутствуют команды типа Slide и
Slide & Morphe.

 Эффект позволяет начать проигрывание сэмпла инструмента с любой из 65536
точек, равномерно распределенных в течении длины всего инструмента.

---------------------------------------------------------------
 23xxyy Speed
---------------------------------------------------------------

 Эффект содержит 2 параметра. xx - скорость тика, yy количество тиков в
одной строке. Можно сделать скорость тиков стандартной. Такой же как в FT,
ST, IT и многих других трэкерах.

---------------------------------------------------------------
 24x00y - On/off effects and generators.
---------------------------------------------------------------

 Включить/выключить эффект или генератор в данной дорожке. Здесь x будет буква
эффекта (5,9,B,D,E,F,G-Z). А в y будет лежать число говорящее о том включен он
или выключен. 0 - выключен, любое другое - включен.

-----------------------------------------------------------------------------
 25x000 Off unused channels in track.
-----------------------------------------------------------------------------
 Комманда отключает в дорожке все каналы общий уровень громкости которых равен
нулю. Подкомманды:

 0 - Выключить в дорожке все каналы, общий уровень громкости которых равен
     нулю.
 1 - Делать это в каждый тик.
 2 - Отключить автоматическую проверку "в каждый тик".

-----------------------------------------------------------------------------
 2600yy Change quantity of track channels.
-----------------------------------------------------------------------------

 Изменить количество каналов в дорожке на количество равное yy. При этом если
количество уменшается скажем до единицы, то этим единственным остается после-
дний использованный канал. И.т.п. Т.е. при уменьшении количества каналов,
отсекаются в первую очередь каналы к которым дольше всего не происходило
обращения.

-----------------------------------------------------------------------------
 27000x Change effects scheme.
-----------------------------------------------------------------------------

 При x равном 0 все эффекты в дорожке накладываются и индивидуально на каждый
ее канал и на всю дорожку целиком. При x равном любому другому числу все
эффекты в дорожке накладываются только на дорожку целиком.

 Примечание: Синтезаторы этим параметром не управляются, их настройки всегда
работают и с каждым каналом в отдельности и со всеми вместе.

-----------------------------------------------------------------------------
 28xxyy - 2d panning
-----------------------------------------------------------------------------

 Панорамирование звука по двум координатам. Видимо, осуществляется за счет
смешения эффектов Surround и Panning. Я не совсем представляю, как автор
собирается осуществить данный эффект, но, видимо, он знает способ. Так как
в предоставленной мне предыдущей версии команд такая команда была.
P.S. Или я все перепутал и то был Volume и Panning?


-------------------------------------
 300yyy - Slide to note.
-------------------------------------

 Эффект с одним параметром. Действует на последний задействованный канал, либо
на несколько каналов, если последними были задействованы несколько виртульных
каналов командами 0,4 . Причем действие на аккорд производится исключительно в
том случае, если в этой же строчке стоит команда аккорда, и в ней используется
такое же количество клавиш, какое было в предшествующем ему аккорде. В команде
нет подкоманд и поддержки огибающих и fade out. Включается в том случае, если
стоит в одной строке с нотой.
 Здесь 300 - имя команды, yyy - 16-ричное количество тиков, за которое
играющая в последнем использованном канале нота плавно перейдет к той ноте,
которая указанна в одной строке вместе с командой.

----------------------------------------------------------------------
 4xyyzz - Combine.
----------------------------------------------------------------------

 Комада позволяет смешивать до трех сэмплов. Т.е она должна работать
только в том случае, когда в этой же строке стоит нота и номер инструмента.
При этом если дорожка в этой позиции содержит команду аккорд, то подмешиваемые
к инструменту сэмплы тоже должны играть тем же аккордом.
 Здесь 4 - команда, x - подкоманда, xxyy - параметры подкоманды.

  Подкоманды:

 0 - задать номера подмешиваемых сэмплов. xx - первого, yy - второго.
В том случае, если xx или yy указывают на несуществующий сэмпл, смешивания
с ним, естественно, не происходит. Это нужно для того, чтобы в случае необходи-
мости делать смешивание не трех, а двух сэмплов.

 1 - задать громкости первого (yy) и второго (zz) подмешиваемого сэмплов,
 только старшие 8 бит от 16'и битных значений.

 2 - задать паннинг первого (yy) и второго (zz) подмешиваемого сэмплов,
 только старшие 8 бит от 16'и битных значений.

 Подкоманды 1 и 2 срабатывают только в том случае, когда стоят в программе
сразу после подкоманды 0. Все младшие неуказанные биты значений громкости и
паннинга автоматически приравниваются к нулю.

----------------------------------------------------------
 5xyzzz - Set EQ parametr or envelope.
----------------------------------------------------------

 Здесь 5 - имя команды, x - подкоманда, y - номер движка, zzz - номер огибающей
либо 12 старших битов значения движка.

 Подкоманды:

 0 - задать конкретное значение для движка.
 1 - задать огибающую. (12 младших бит номера, вместо старших 4'х взять 0)
 2 - Fade out или slide значения движка EQ в последнем использованном виртуа-
 льном канале дорожки.

 Пример: 52xyyz

 Здесь x - это номер движка (0-9,A-Z), yy - это 8 старших бит того значения
параметра эффекта, к которому он должен прийти за количество строк z. Младшие
биты 0.

 3 - Fade in огибающей значения движка в последнем использованном виртуальном
 канале дорожки.

 Пример: 53xyyz

 Параметры теже что и у Fade out.

 Подкоманды 4-7 повторяют подкоманды 0-3, но работают не с EQ отдельного
виртуальнго канала, а с EQ всей дорожки.

 Подкоманды 8-B повторяют подкоманды 0-3 и 4-7, но работают не с EQ отдельного
виртуальнго канала или дорожки, а с EQ всех дорожек и каналов (мастера).


----------------------------------------------------------
 6xyyzz - Vibrato.
----------------------------------------------------------

 В принципе необходимость в данном эффекте отпадает, так как его вполне можно
сделать и при помощи комманды Pitch. Но для тех, кто привык к использованию
данной команды, можно сделать и ее. Кстати она управляет другим более глубоким
уравнем питча и недоступна для комманд управления питчем.

 Подкоманды:

 0 - стабильное вибрато в течение нескольких тиков, пока играет одна
нотнокомандная строка. yy здесь - это глубина эффекта (амплитуда синусоидальной
зацикленной огибающей питча), zz - частота (ширина той же огибающей).
Если в следущей строчке не стоит эта же команда, то в последний тик данной
нотнокомандной строки происходит моментальный Fade out огибающей Pitch'а
в отметку 0.

 1 - возникающее вибрато. Здесь yy - это амплитуда и частота vibrato, zz -
количество тиков, за которое происходит повышение его амплитуды из точки 0
до максимума при помощи функции fade in.

 2 - плавное затухание возникающего вибрато (или fade out для огибающей питча).
yy здесь не используется, zz - длина fade out'а в тиках.

---------------------------------------------------------------
 7vwxyz Multi delay note
---------------------------------------------------------------

 Здесь vwxyz - это список тиков, в которых нота будет несколько раз сыграна
в этом канале со всеми остальными командами, которые ей предписаны.
Величина смещения опять же будет производиться всеми теми же символами, которые
были использованы с нотами аккорда.

Пример: B0124N

 Здесь нота сыграет в тики 0,1,2,4, а знак N будет пропущен.

---------------------------------------------------------------
 8xyyyy Panning
---------------------------------------------------------------

 Эффект с одним 16-битным параметром, и подкомандами. Здесь 1 - имя команды,
x - имя подкоманды. yyyy - 16-ричное значение, задаваемое подкомандой.

Все подкоманды те же, что и в команде Pitch. Но добавленны еще подкоманды 4-7
которые выполняют теже функции что и подкомманды 0-3, но для всей дорожки.


---------------------------------------------------------------
 9xyzzz Resonance filter.
---------------------------------------------------------------

 Эффект содержит 2 параметра. Управление ими производится так же, как EQ.

 0 - Cutoff.
 1 - Resonance.

---------------------------------------------------------------
 Axxxxx Program
---------------------------------------------------------------

 Здесь A - имя команды, xxxxx - имя программы. Имя программы может включать в
себя латинские символы, цифры и знаки препинания.

 Программа - это последовательность любого количества команд, выполняющегося
одновременно и могущего включать в себя в том числе и другие программы.
Редактирование программ осуществляется в отдельном редакторе программ.
Переход в редактор программы может быть осуществлен из любой строки
pattern editor'а, в которой стоит команда A, или из редактора инструментов
при помощи кнопки Enter. Естественно, переход будет осуществлятся в ту
программу, на которой при этом находился курсор. Так же должен быть выход и
в обратную точку при помощи той же клвиши Enter.

 Примечание: для того, чтобы в случае выполнения программ из программы избежать
закольцованности, которая может привести к зависанию плеера, необходимо при
старте выполнения программы где-то в памяти заводить список программ,
выполняемых в этой программе. Причем в первую очередь занести в него программу,
с которой все началось, и в дальнейшем перед запуском каждой следующей программы
из программы и занесении ее в список выполненных программ проверять в списке, не
была ли уже запущена эта программа. Если она уже запускалась, то пропустить
ссылку на эту программу и идти дальше по списку команд.

 В редакторе программ кроме вертикального списка выполняемых команд также
должны присутствовать два 16-полосных движка 8-полосного стерео-эквалайзера.
Один из них во включенном состоянии будет сразу ставить EQ в определенное
положение, а второй во включенном состоянии за определенное время делает
slide всех движков в то состояние, которое на нем указано. Если включен
и первый, и второй движки EQ, то второй движок EQ производит slide от параметров
первого к указанным в нем параметрам за указанное где-нибудь рядом с ними время.
Если же первый движок EQ не включен, а второй включен, то второй движок
производит slide тех параметров, которые были у EQ до команды "программа" к тем,
которые в нем установлены.

 В связи c тем, что каждая ручка движка будет управлять довольно-таки немалыми
параметрами (+-96 дб), необходимо сделать, чтобы длина ручек управления была
значительной. Скажем, треть экрана по вертикали. И все равно, для большей точности
под каждой из них должен быть изменяемый цифровой эквивалент. Варьирующий
положение ручки от 0000 до FFFF.

 Так же надо будет указать, для какого из уровней EQ будут выполняться эти два
движка. То есть либо для последнего использованного виртуального канала
дорожки, либо для EQ всей дорожки целиком, либо для EQ всех дорожек и каналов.

 И, кстати, теоретически возможное количество программ, как и огибающих, должно
быть не меньше 65536. :)

---------------------------------------------------------------
 Bxyzzz Flanger
---------------------------------------------------------------

 Эффект содержит 4 параметра. Управление ими производится так же, как EQ.
Последний содержит либо 0, либо не ноль.

 0 - Амплитуда.
 1 - Частота.
 2 - Точка входа.
 3 - Моно/стерео.


---------------------------------------------------------------
 Сxyyyy Volume
---------------------------------------------------------------

 Все параметры те же, что у Panning'а. Но здесь есть еще четыре подкоманды
(8-B), которые выполняют те же функции, что и 0-3, но для всех дорожек и
каналов одновременно (для мастера).

---------------------------------------------------------------
 Dxyzzz Distortion
---------------------------------------------------------------

 Эффект содержит 2 параметра. Управление ими производится так же как EQ.


 0 - Глубина.
 1 - Уменьшить громкость на...

---------------------------------------------------------------
 Exyzzz Delay echo
---------------------------------------------------------------

 Эффект содержит 4 параметра. Управление ими производится так же, как EQ.

 0 - Расстояние в тиках между эхами.
 1 - Громкость первого эха в процентном соотношении с оригиналом.
 2 - Процентное соотношение громкости каждого следующего эха к предыдущему.
 3 - Амплитуда между стереоэхами. Эхи просто поочередно должны ставиться
     в левом и правом каналах. А амплитуда указывает, насколько, далеко в пано-
     раме они будут друг от друга разнесены.


---------------------------------------------------------------
 Fxyzzz Reverb
---------------------------------------------------------------

 Эффект содержит параметры глубина, длина и EQ, и управляется так
же, как EQ. С той лишь разницей, что EQ здесь накладывается на добавляющееся
к звуку эхо, и есть две новых подкоманды - G глубина и H длина реверберации.
Причем во всем этом только параметр H является глобальным, т.к. нельзя менять
длинну реверберации каждого отдельного канала или дорожки, когда на все один
ревербератор. Все же остальные параметры могут подбираться индивидуально для
каждого виртульного канала.

 Здесь, наверное, у каждого маломальски разбирающегося в электронной музыке и
звуке человека, что называется, волосы встали дыбом. Нет, я не сошел с ума,
я действительно изобрел таки (может быть и велосипед, кто знает :) способ, как
можно реализовать хороший ревербератор, и EQ в одном флаконе, причем так, что
при любом количестве подключенных к ним дорожек нагрузка на процессор будет
минимальной. И скоро вышлю автору проэкта TrickTrack детальное описание
данного алгоритма.

---------------------------------------------------------------
 Gxyzzz - fine 2d panning
---------------------------------------------------------------

 Эффект содержит 2 параметра. Управление ими производится так же как EQ.
 Это тот же эффект что и 28, но с возможностью выставления более точных коорди-
нат и управления ими при помощи огибающих.

-------------------------------------------------------------------------------
 Оставшиеся 19 символов резервируются для других эффектов, которые, возможно,
напишут другие люди. Этим я подразумеваю, что формат TrickTrack будет с откры-
той архитектурой, и каждый модуль сможет содержать до 19 дополнительных эффе-
ктов, или синтезаторов управление которыми будет производится так же, как у EQ.
 Возможно автор даже сможет сделать поддержку синтезаторов Buzz. Хотя незнаю
насколько это было бы корректно, и хочет ли он этого. Впрочем я думаю вполне
возможно сделать какой нибудь подпольный конвертор. Для друзей и для варезных
сайтов. :)
-------------------------------------------------------------------------------

 Ну вот, кажется, описан синтаксис всех команд. И теперь перед тем, как начать
более приближенное к программированию рассмотрение команд и их распознавания,
хотелось бы сказать несколько слов о редакторе инструментов.

 Инструменты формата Trick track теоретически могут содержать до 120 сэмплов
(по одному на каждую ноту в 10 октавах). Но сами по себе не содержат никаких
огибающих или параметров управления их громкостью паннингом и им подобным.
Все это будет осуществляться при помощи программ. Те, кто работал с Fast
Tracker'ом, знают, как там организована установка сэмплов за определен-
ными нотами/клавишами инструмента. А для тех, кто не знает, поясню. В редакторе
инструментов там нарисованы черные и белые клавиши, такие же, как у форте-
пиано или синтезатора и т.п, ну, в общем, стандартные. Так вот, я предлагаю сде-
лать то же самое и в редакторе инструментов TT. И не только это. Кроме этого,
надо сделать для каждой клавиши возможность задавать программу, в которой будет
возможность закрепить за этой клавишей любые огибающие для любых эффектов,
аккорды, морфинги, EQ синтезаторы и вообще все, что прийдет в голову. Ну, есте-
ственно, в рамках существующих комманд.

 Для тех, кто не совсем понимает, для чего это нужно обьясню.

 Во-первых, это простота использования и экономия памяти, так как в инструменте
не будет ничего, кроме списка сэмплов и программ. Который в случае, когда в
инструменте всего один сэмпл и одна программа будет занимать не больше 10 байт.

 Во-вторых, это максимально простая возможность установки одинаковых параметров
разным инструментам.

 В-третьих, это возможность максимально детально описать поведение инструмента
в случае нажатия на каждую конкретную клавишу. Здесь можно будет и делать
инструменты со смешанными сэмплами (команда 5 combine), и зашивать за каждой
клавишей определенные аккорды (команда 0 akkord), и вставлять в инструмент
синтезаторы (если кто-нибудь их сделает), и еще много чего.


 Примечание: При расшифровке и проигрывании программ инструмента обязательно
нужно делать несколко проверок.

 1. Если в нажатой клавише инструмента есть команда аккорд, автоматически
    нажимающая несколько других клавиш, то команды аккорд, которые, возможно,
    находятся в добавленных клавишах, срабатывать не должны. В противном случае,
    если человек зашьет себе в инструмент десятка два аккордов и попытается
    поиграть ими, нажимая отдельные клавиши, он, вполне возможно, будет нажимать
    сразу все клавиши всех зашитых им аккордов. Просто при каждом нажатии на
    определенную клавишу будет начинатся цепная реакция. Один нажатый аккорд
    будет одновременно нажимать на три других аккорда, те три еще на девять
    и так далее.

 2. При одновременном использовании команд аккорд и combine. На команду
    combine команда аккорд не должна оказывать никакого действия. Т.е. не нужно
    дублировать те сэмплы, которые она подмешивает к инструменту, и играть
    их еще несколькими нотами. Так как в других нотах и без них наверняка будут
    стоять добавленные сэмплы, но в немножко другом соотношении громкости
    относительно друг друга.

 И хотелось бы сразу предложить несколько сервисных функций.

 1. Создать в памяти и закрепить за каждой клавишей отдельную программу.
    При этом название каждой программы можно сделать соответствующим номеру
    инструмента и ноте. Например "3FD#4".

 2. Равномерно распределить по клавишам заданный список сэмплов. И в этой
    же функции сделать вкл/выкл кнопочку, которая будет кроме расставления
    сэмплов по клавишам еще и делать плавные переходы между ними при помощи
    комманды 5 combine, которую она будет проставлять с различными параме-
    трами громкости в программу каждой клавиши. Т.е получится, что в каждой
    следующей клавише какойто инструмент становится тише, а какой-то громче.
    Вот примерная схемка:

    000000000000000000001111111111112222222222223333333333334444444444445555
    000000000000111111111111222222222222333333333333444444444444555555555555
    000011111111111122222222222233333333333344444444444455555555555555555555

    Здесь каждая позиция по горизонтали - это нота. Все цифры, находящиеся в
    ней по вертикали, это номера сэмплов, играющих в ноте. А количество цифр,
    присутствующих в определенной позиции (ноте), соответствует примерной
    сильно округленной громкости сэмплов, обозначенных этими цифрами и играю-
    щих в данной ноте.

 3. Добавить в программы всех клавиш комманду xxxxxx.
 4. Уменьшить все программы, стерев в них последнюю комманду.

 5. Стереть все программы, распределенные по клавишам редактируемого инстру-
    мента, и с клавиш, и из памяти. И поставить на всех клавишах программу
    xxxxxx. Причем, если xxxxxx - это одна из уже присутствующих на клавишах
    этого инструмента программ, то она из памяти не стирается.


to Berk: Если тебе нравится такая система, то, наверное, стоит предложить людям в
конференции по TrickTrack'у пополнить данный список сервисных функций. Так как
я чувствую, что тут еще много чего можно добавить, а самому в голову пока ничего
не приходит.


 Немного о редакторе сэмплов. Я, конечно, понимаю, предложенная система дает
очень богатые возможности для получения стереозвука из моносэмплов,
но все же категорически настаиваю на возможности использования стереосэмплов
и моносэмплов со смещенными и/или инвертированными по отношению к друг другу
стереоканалами. Не знаю как другие люди, а лично я постоянно делаю псевдо стерео
для сэмплов таким способом. И мне он очень нравится. И кстати помнишь была идея
сделать возможность синтезировать сэмплы при загрузке сонга? Так вот, сдесь же,
в редакторе сэмплов можно это осуществить. Сделав специальную опцию в которой
указать номер дорожки из которой будет синтезироватся инструмент. И при загру-
зке модуля автоматически синтезировать все сэмплы в которых эта опция будет
включенна. Но в общем это конечно будет иметь смысл только в том случае если
в tt будут синтезаторы.


to Berk: Мне не хотелось бы сказанным далее задеть твое достоинство програ-
ммиста. Просто я не хочу чтобы остались какието неточности. И кроме того есть
несколько моментов подобных например случаю с цепной реакции вшитых в инстру-
мент при помощи програм, аккордов, или закольцованности программ. О которых
обязательно нужно сказать. Вполне возможно, что ты и сам обо всем этом дога-
даешся. А вдруг нет? Перестраховатся никогда не помешает.



 Итак, мы уже знаем, какие эффекты и команды есть в плейере, и знаем, что они
делают, но пока еще не совсем понятно, как они осуществляют предписанные им
функции.

 Что мы имеем.

 Есть движок, в котором идет поток неограниченного количества моноканалов.
Все каналы обьединяются в определенное количество групп, называемых
дорожками. Они уже стерео. Дорожки, в свою очередь, обьединяются в один общий
поток. Следовательно, есть три класса потоков, над которыми производятся
определенные действия.

 Первый уровень - назовем его мастер.

 Он стерео и его контролируют как минимум три параметра, непосредственно
влияющие на звук. Громкость Pitch и скорость. Также может быть включен EQ.
Подконтрольны огибающим громкость и EQ.

 Второй уровень - дорожка.

 Она стерео и ее контролируют как минимум три основных параметра, непосре-
дственно влияющие на звук. Громкость, Panning и Pitch. Также возможны
несколько дополнительных параметров. Resonance filter, EQ, Delay Echo, Flanger,
Reverb, Distortion и дополнительно подключенные эффекты, не входящие в
первоначальный пакет программы.

 Третий уровень - канал.

 Он моно и его контролируют как минимум три основных параметра, непосредствен-
но влияющие на звук. Громкость, Panning и Pitch. Также возможны несколько
дополнительных эффектов. Resonanse filter, EQ, Delay Echo, Flanger, Reverb,
Distortion и дополнительно подключенные эффекты, не входящие в первоначальный
пакет программы, среди которых могут быть и синтезаторы. Проигрывание стерео-
сэмплов осуществляется за счет того что под каждый из них заводится два моно-
канала работа с которыми немножко отличается от работы с обычными моноканалами.

 Все эффекты присутствующие в каналах и дорожках управляются либо статичными
числами, либо огибающими. Назначение огибающих производится только при помощи
комманд, а изменение статичных параметров может происходить как при помощи
комманд, так и непосредственно из редактора. Т.е. должен быть редактор пара-
метров эффектов в разных дорожках. В котором можно будет покрутить те из ручек
которые в данный момент неуправляются огибающими. Видимо этот редактор стоит
сделать только для управления параметрами дорожки и мастера, и не давать в нем
доступа к управлению каналами. Так как пользователю будет тяжеловато отловить
нужный ему канал, при включенной полифонии.

Пожелания:

 В редакторе эффектов каждой дорожки или мастера должны быть все эффекты
присутствующие в сонге.
 На включение редактирования параметров каждого из них должна быть своя кнопка.
 Кнопки тех из них которые не включенны, в редактируемой дорожке или мастере
должны быть окрашенны в серый цвет. Либо можно гденибудь рядом с ними сделать
надпись Active/Not active.
 Если при одновременном редактировании эффекта и проигрывании сонга данный
эффект выключается коммандой, то редактор эффектов должен сразу сообщать
пользователю, что данный эффект не активен (окрашивать его кнопку серым
цветом или чтонибудь в этом духе). И наоборот.
 Кстати есть идея. Я думаю у всех кто когданибудь работал с софтовым синтеза-
тором TB303, осталась настальгия по его функции, которая позволяла запомнить
кручение какой нибудь ручки. Почему бы не осуществить тоже самое в TT? Можно
сделать в редакторе параметров эффектов функцию записи кручения какой нибудь
из ручек в огибающую. Но для этого прийдется сделать 2 типа огибающих. Отре-
зковую и точечную. Понятно, что преобразовывать кручение какойнибудь ручки в
нормальную отрезковую огибающую практически не возможно, а вот в точечную
очень даже запросто. Что такое отрезковая огибающая знают все, а о точечной
прийдется рассказать. В принципе ничего сложного. В точечной огибающей на
каждый тик времени есть своя точка управляющая величиной параметра эффекта.
Редактирование точечных огибающих можно сделать таким же как рисование
сэмплов в редакторе сэмплов FT2. А запись в огибающую с какой нибудь из
ручек редактора параметров эффектов можно сделать так: есть кнопка "Rec
envelope", рядом с ней записан номер огибающей в которую будет производится
запись, который естественно можно изменить. При этом если огибающая с таким
номером уже существует она стирается. После нажатия, кнопка остается в зажа-
том состоянии до тех пор пока либо не будет произведена запись в огибающую,
либо на нее не нажмут еще раз, тем самым отменив запись. Запись начинает
производится с того момента как пользователь мышкой нажмет на любой движок
одного из параметров эффекта, до того момента когда он отпустит кнопку на
мышке и прекратит дергать этого беднягу. :) Так же мне кажется что лучше
будет если длинна огибающих будет изменяемой. Скажем от 1 до 65536 тиков.
 Cтоит наверное так же добавить, что порядок выполнения всех эффектов кроме
Pitch, Volume, Panning, EQ и Reverb можно сделать выбираемым. Т.е выводить
список всех эффектов присутствующих в сонге, и сделать этот cсписок индиви-
дуальным для каждой дорожки. А менять местами эффекты в списке можно так же
как меняются местами муз.файлы в плейлисте winamp'а. И просто для наглядности
выводить в конце списка EQ и Reverb. И в начале Pitch, Volume и Panning.

 Теперь рассмотрим плейер.

 Первая операция которая производится это извлечение сэмпла из памяти в канал
с наложением на него интерполяции. Частота на которую производится ресэмплинг
с интерполяцией зависит от четырех уравней статичных либо управляемых огиба-
ющими переменных. Первый уровень используется для установки относительной
частоты сэмпла, проще говоря только для настройки сэмплов. Второй уровень
используется для установки ноты и наложения на нее Vibrato. Третий уровень для
комманд Pitch и Slide. И наконец четвертый уровень управляет тональностью
мастера. Вся шкала тональности звука делится на мизерные деления. Назовем их
finetune. Разница частоты между любыми двумя соседними finetune равняется
соотношению 1 к 2^(1/(128*12)). В шкале 65536 положений, от -32768 до +32767.
Разница между частотами двух соседних нот в данной шкале будет равна 128
finetune'ам.
  Первый уровень является относительной частотой сэмпла и используется для
настройки сэмплов. Т.е. в редакторе сэмплов каждый сэмпл можно настроить,
установив ему любую ноту в пределах 10 октав и finetune относительно этой
ноты от -128 до +127 (Т.е он будет в два раза больше чем расстояние между
нотами). При этом играя сэмпл, настроенный на относительную ноту C-5 и
finetune 0, нотой C-5 мы будем играть его с частотой выборки ресэмплинга
равной единице. Проще говоря ресэмплинг над ним производится не будет.
Т.к. С-5 у нас это центр всей шкалы finetune. Относительную настройку сэмпла
в пределах этой шкалы мы можем делать от -7680 до +7679 finetune т.к у нас
всего десять октав. Положение ноты пришедшей плейеру из текста сонга или с
клавиатуры тоже может быть в пределах 10 октав и у нас получается уже немножко
больший разброс от -15360 до 15358. Сверху есть еще один уровень, уровень для
наложения Pitch и slide который должен гарантировать нормальный slide преход
от скажем C-0 к B-9 и наоборот (случай конечно клинический, но кто знает, что
этому юзверю в голову прийдет :), следовательно для переменной этого уровня
надо взять уже 20 октав (+-10) и он еще в два раза расширяет общий спектр
доступных для ресэмплинга частот в шкале, теперь частота играемого сэмпла
уже может варьироватся от -30720 до +30716. И наконец последний четвертый
уровень который поднимает или опускает тональность всей композиции на +-1
октаву, и увеличивает диапазон finetune еще на 3072 делений и теперь он от
-32056 до +32051. В общем получается у нас, что теоретически задействованно
во всей шкале может быть аж 64588 делений в 42'х октавах. И хотя на практике
едвали это число перевалит за 15000, перестраховатся не помешает и при инста-
ляции плеера в память, просчитать табличку на 64592 чисел в которую записать
числа с плавающей точкой, являющиеся длинной дробного шага по оригинальному
сэмплу при ресэмплинге. Чтобы при ресэмплинге не делать в математических
расчетах лишних операций.
 Здесь так же стоит отметить, что заменой выборки данных в каналы из сэмплов
могут служить синтезаторы, если таковые будут иметь место. У них будут все
теже уровни питча которые накладываются на сэмплы, но вместо выполнения про-
цедуры ресэмплинга и инетерполяции, будет производится процедура синтеза звука,
для задавания тональности которой будет использоватся переменная содержащая
сумму всех четырех уровней питча. Причем первый уровень должен иметь отдельный
движок finetune и ноту с октавой прямо в редакторе эффектов и синтезаторов.

 После выборки данных из сэмпла в канал или его синтеза, на него накладываются
дополнительные эффекты, накладываемые на каждый конкретный канал. Если они
включенны.

 Вторая и третья обязательные операрации производимые над звуком это изменение
громкости и паннинга. Они производятся уже при микшировании каналов в дорожки.
Громкость имеет шесть накладываемых друг на дружку уровней переменных, каждая из
которых может управлятся огибающей или содержать статичное число. Первый уро-
вень это паннинг канала, второй и третий уровень громкость канала (один колонка
в паттерн едиторе, второй можно использовать под огибающие), четвертый уровень
паннинг дорожки, пятый громкость дорожки, шестой уровень громкость мастера.
 Порядок вычесления:
 Все каналы принадлежащие дорожке микшируются в два стереоканала. При этом на
левый канал накладывается огибающая паннинга, тем же способом, что и огибающая
громкости, а на правый таже огибающая, но перевернутая по вертикали. Таким
образом для левого и для правого каналов дорожки, громкость вычисляется путем
наложения огибающей паннинга на огибающую громкости. В случае с левым каналом
происходит просто наложение огибающей паннинга на огибающую громкости, а в
случае с правым каналом происходит наложение перевернутой огибающей паннинга
на огибающюю громкости. Переменные управляющие громкостью и паннингом могут
содержать целое число от 0 до 65535. Наложение переменных громкости происходит
по формуле: R=S*(1/65535*N). Наложение переменных паннинга на левый канал
происходит по формуле R=S*(1/65536*N). Наложение переменных паннинга на правый
канал происходит по формуле R=S*(1/65536*(65535-N)). Здесь R - результат,
S - исходное число, N - переменная громкости или паннинга. И кстати было бы
неплохо если бы переменные управляющие первым уравнем громкости канала по
дефолту выставлялись в четверть максимальной громкости 16384.

 В общем синтез или ресэмплинг с интерполяцей каналов и наложение на них
эффектов и последующее микширование в мастер может происходить по двум схемам:



 Схема N1 предпологает, что дополнительные эффекты будут накладыватся на каждый
канал дорожки индивидуально:

|------------------------------------------------------------------------------|
|Подсчет общей тональности канала, путем сложения всех переменных управляющих  |
|питчем.                                                                       |
|------------------------------------------------------------------------------|
                                       \/
|------------------------------------------------------------------------------|
|Синтез или ресэмплинг с интерполяцией на вычесленную частоту.                 |
|------------------------------------------------------------------------------|
                                       \/
|------------------------------------------------------------------------------|
|Наложение всех уравней громкости и паннинга друг на дружку в порядке          |
|очередности и наложение этой громкости на каналы.                             |
|------------------------------------------------------------------------------|
                                       \/
|------------------------------------------------------------------------------|
|Наложение дополнительных эффектов на каналы. Если они включенны.              |
|------------------------------------------------------------------------------|
                                       \/
|------------------------------------------------------------------------------|
|Микширование всех каналов дорожки в мастер.                                   |
|------------------------------------------------------------------------------|




 Схема N2 предпологает, что дополнительные эффекты будут накладыватся на все
смикшированные каналы дорожки:

|------------------------------------------------------------------------------|
|Подсчет общей тональности канала, путем сложения всех переменных управляющих  |
|питчем.                                                                       |
|------------------------------------------------------------------------------|
                                       \/
|------------------------------------------------------------------------------|
|Синтез или ресэмплинг с интерполяцией на вычесленную частоту.                 |
|------------------------------------------------------------------------------|
                                       \/
|------------------------------------------------------------------------------|
|Наложение всех уравней громкости и паннинга друг на дружку в порядке очередно-|
|сти. Микширование каналов, c наложенной на них общей громкостью, в дорожку.   |
|------------------------------------------------------------------------------|
                                       \/
|------------------------------------------------------------------------------|
|Наложение дополнительных эффектов на дорожку. Если они включенны.             |
|------------------------------------------------------------------------------|
                                       \/
|------------------------------------------------------------------------------|
|Микширование дорожек в мастер.                                                |
|------------------------------------------------------------------------------|

Тут надо особо отметить несколько моментов.

1. Для каждой дорожки должны присутствовать несколько настроек. Из которых в
   том числе будет следовать по какой схеме будут накладыватся дополнительные
   эффекты. Параметр дорожки из которого будет следовать какой схемой нужно
   воспользоватся будет такой:

 Дополнительные эффекты накладываются на:

a) каналы и дорожку. Выбирается схема N1.
 При этом параметры всех эффектов имеют два уровня. Для канала и для дорожки.
Хотелось бы чтобы эти два уровня не накладывались друг на дружку, а происходило
бы либо сложение с отсечением лишнего, либо сложение параметров каждый из кото-
ых делится на 2. Результат в таком случае автоматически не сможет превысить
число 65534 или +-32766. Тоже относится и к синтезаторам (причем всегда, иначе
они не будут доступны для управления из редактора эффектов, так как управляют
только отдельными каналами).

б) дорожку. Выбирается схема N2.
 При этом все дополнительные эффекты естественно накладываются только на доро-
жку целиком.

2. Включение выключение эффектов происходит и из их редактора и коммандами.
3. Количество каналов в дорожке регулируется и из редактора эффектов и
   коммадами.

4. Все эффекты накладываются отдельно на левый и на правый канал канала даже
   если он моно. Т.к эффекты мугут быть стерео.

5. Работа с моно каналами являющимимися половинками стерео сэмплов будет
   происходить по следующей схеме: При микшировании например в левый канал
   дорожки, будут братся все ее моно каналы и левые половинки стерео каналов.
   А при микшировании в правый канал дорожки, будут братся все правые половинки
   стерео каналов и моноканалы.

6. Если в дорожке включается какойто синтезатор, то он не подменяет все ее
   каналы на себя и сэмплы или другие синтезаторы возможно еще играющие в
   других каналах продолжают играть как и играли.

 Дальше рассмотрим все переменные которые будет использовать описанный выше
плейер.

 Переменные канала:

 1. Номер играемого сэмпла или синтезатора. (из него берутся данные о битности
    и зацикленности). С числа 256 идут номера загруженных в сонг синтезаторов.
 2. Номер сэмпла который начнет играть после того как первая переменная
    массива N6, в этом списке, дойдет до нуля.
 3. Точка из которой начнет играть следующий сэмпл. (она не обязательно равна
    той с которой начинает играть указанный в переменной N1 сэмпл. Так как
    есть еще комманда Sample Offset и псевдостерео сэмплы у которых один из
    каналов играет не сначала.)
 4. Адрес в памяти из которого берется два байта играемого в конкретный момент
    времени сэмпла. Хранится в виде числа с плавающей точкой.
 5. Шаг с которым делается выборка из этого сэмпла. Хранится в виде числа с
    плавающей точкой.
 6. Количество тиков оставшееся до конца сэмпла, если он не зациклен. Каждый
    тик оно уменьшается на единицу. Когда число равно 1 происходит slide в
    ноль за 1 оставшийся тик. Если данное число равно нулю, то с каналом не
    производится никаких операций. Проще говоря он выключен.
 7. Массив из шести чисел. Для комманд Delay и Multi Delay. Каждое число соде-
    ржит количество тиков до того как сэмпл в этом канале начнет играть с на-
    чала. Последнее число содержит 0. Т.е какоето из чисел уменьшается на
    единицу каждый тик, пока не доходит до нуля. За тем сэмпл начинает играть
    с начала и берется следующее число, и так далее пока программа не находит
    в этом массиве число которое сразу равно нулю.
 8. Переменная указывающая на то моно это сэмпл или половинка стерео сэмпла.
    0 - моно, 1 - левая половинка, 2 - правая половинка, 3 - правая переверну-
    тая половинка (для сэмплов с перевернутой амплитудой и псевдо стерео).
 9. Все описанные в самом начале текста переменные для эффектов.

 Переменные дорожки:

 1. Количество используемых в дорожке каналов. В принципе его можно ограничить
    256'тью.
 2. 8'и битная переменная указывающая коммандам, работающим с последними
    использованными каналами, с каким количеством последних использованных
    каналов им работать.
 3. Моссив из 28'и чисел который содержит порядок наложения дополнительных
    эффектов.
 4. 32'х битная переменная указывающая на то какие из дополнительных эффектов
    или синтезаторов включенны/выключенны в дорожке.
 5. Переменная указывающая схему наложения эффектов. Либо на всю дорожку
    целиком, либо и на каналы и на дорожку (в этом случае, как я уже писал
    раньше, управление эффектами наложенными на всю дорожку эмулируется путем
    введения двух уравней огибающих).
 6. Все описанные в самом начале текста переменные для эффектов.

 Переменные мастера.

 1. Две переменных скорости.
 2. Все описанные в самом начале текста переменные для эффектов.

 Примечание: Питч мастера не управляется из програм и дорожек. А выставляется
только в настройках мастера в редакторе эффектов и синтезаторов.

 Ну вот, вродебы все необходимые подробности описанны. Теперь можно чуть более
детально рассмотреть общую схему выполнения эффектов.

 Расшифровка всех эффектов пришедших в один конкретный момент времени из
программы ноты инструмента, и из дорожки осуществляется в пять проходов.

1. Сначала выполняется программа ноты инструмента. Как я уже писал она
   выполняется не совсем так как обычная программа. Хотя все остальное в ней
   то же самое.
2  В случае если в тексте дорожки стоит комманда программа, заводится список
   выполненных программ.
3. Выполняется поиск всех комманд аккорд combine и morphing и выделяется
   необходимое для выполнения всех этих комманд колличество каналов.
   Причем все они выставляются как последние использованные, в переменной
   канала N2. Т.е в том случае если в программе присутствует и комманда
   combine и комманда аккорд все подмешиваемые к инструменту сэмплы тоже
   должны играть аккордами. Тоже самое происходит и с коммандой morphe
   current note и slide & morphing. Проще говоря находятся все сэмплы
   которые должны начать играть в данной позиции и все ноты которыми каждый
   из них должен заиграть. _Но_ при этом не учитываются аккорды прописанные
   в инструменте. Проще всего это будет сделать выполняя программу ноты и
   программу дорожки отдельно друг от друга. Т.е. комманда Аккорд будет
   видеть в инструменте только тот сэмпл который прописан на его клавише и те
   которые возможно добавляются к нему из программы находящейся в дорожке,
   коммандой combine и/или morphe.
4. Выполняются комманды аккорд, combine и morphing.
5. Выполняются все остальные комманды. Причем те из них которые управляют
   последними использованными каналами срабатывают на каналы начавшие играть
   в этой же строке. Если конечно они есть. И надо особо отметить что комманда
   Slide & Morphing не обнуляет переменную дорожки N2, а просто увеличивает ее
   на одну или более дорожек.


to Berk: В принципе логика выполнения большого количества комманд в одной
строчке/программе не так уж проста и тут еще есть над чем подумать. Так, что
если возникнут какие то сложности, пиши, подумаем вместе.


 И на последок еще несколько мыслей:

 Немного о том как можно сделать антикликер. Можно при проигрывании автомати-
чески делать проверку текста сонга на 1 тик вперед. И если в следующий тик
произойдет переключение играющего в канале сэмпла на другой сэмпл, то в течение
одного тика производится моментальный slide в точку ноль переменной громкости
первого уровня этого канала. Причем даже если в ней была включенна огибающая
и/или fada out или fade in они автоматически прерываются и то значение которому
была равна громкость этого канала в данный момент, в течение одного тика,
плавно слайдируется в ноль. А в течение следующего тика в любом случае произво-
дится моментальный Fade in из точки ноль, огибающей громкости того же канала.

 Кстати делать супер точными, побайтовыми, можно только огибающюю громкости
первого уровня и огибающую питча третьего уровня. И еще можно сделать в реда-
кторе эффектов, для каждого эффекта отдельный флажок. Типа "Best quality
envelopes for this machine parameters on/off". Остальное только при рэндэринге
в Wav.

 Вот и все. Надеюсь сильно не загрузил. :) Система получилась довольно таки
сложная, но думаю она порадует любого трэкерщика, который сможет ее оценить
в полной мере. Мне кажется она дает практически неограниченные возможности
обработки звука, и работы с сэмплами, инструментами и синтезаторами.

